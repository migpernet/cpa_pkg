<launch>
    <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="world_name" value="$(find cpa_pkg)worlds/mud.world"/> <!-- Note: the world_name is with respect to GAZEBO_RESOURCE_PATH environmental variable -->
        <arg name="paused" value="false"/>
        <arg name="use_sim_time" value="true"/>
        <arg name="gui" value="true"/>
        <arg name="recording" value="false"/>
        <arg name="debug" value="false"/>
    </include>

    <!-- Convert an xacro and put on parameter server -->
    <param name="robot_description" command="$(find xacro)/xacro $(find cpa_pkg)/urdf/ur5_gazebo.urdf.xacro" />

    <!-- Spawn a robot into Gazebo -->
    <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-param robot_description 
        -urdf -x 0 -y 0 -z 1.03 -R 0 -P 0 -Y 1.57 -model ur5" />  

    <!-- Load joint controller configurations from YAML file to parameter server -->
    <rosparam file="$(find cpa_pkg)/config/trajectory_control.yaml" command="load"/>

    <!-- load the controllers -->
    <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
        output="screen" ns="/ur5" args="eff_joint_traj_controller joint_state_controller"/>

    <!-- Load other controllers, but do not start them -->
    <node name="ros_control_stopped_spawner" pkg="controller_manager" type="spawner" ns="/ur5"
        args="--stopped joint_group_eff_controller" output="screen" respawn="false" />

    <!-- convert joint states to TF transforms for rviz, etc -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"
        respawn="false" output="screen">
        <remap from="/joint_states" to="/ur5/joint_states" />
    </node>

</launch>